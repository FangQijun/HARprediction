xVal <- 3000
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se1
xVal <- 3
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se1
yVal+qt(.975, df=n-2)*se2
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[2,1]+c(-2,2)*sumCoef[2,2]*qt(.975,df=fit$df)
sumCoef[2,1]+c(-.5,.5)*sumCoef[2,2]*qt(.975,df=fit$df)
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~I(x*2)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- 3
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sumCoef <- summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*sumCoef[2,2]*qt(.975,df=fit$df)
sumCoef
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~I(x*2))
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- 3
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sumCoef <- summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*sumCoef[2,2]*qt(.975,df=fit$df)
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~I(x*2))
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- 3
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sumCoef <- summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*sumCoef[2,2]*qt(.975,df=fit$df)
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~I(x*2)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- 3
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sumCoef <- summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*sumCoef[2,2]*qt(.975,df=fit$df)
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~I(x/2))
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- 3
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sumCoef <- summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*sumCoef[2,2]*qt(.975,df=fit$df)
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- 3
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sumCoef <- summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*sumCoef[2,2]*qt(.975,df=fit$df)
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- x
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sum1 <- sum((y-yVal)^2)
fit <- lm(y~x-1)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- x
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sum2 <- sum((y-yVal)^2)
sum2-sum1
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- x
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sum1 <- sum((y-yVal)^2)
sum1
# fit <- lm(y~x-1)
# beta1 <- cor(y,x)*sd(y)/sd(x)
# beta0 <- mean(y)-beta1*mean(x)
# e <- y-beta0-beta1*x
# sigma <- sqrt(sum(e^2)/(n-2))
# ssx <- sum((x-mean(x))^2)
# xVal <- x
# yVal <- beta0+beta1*xVal
# se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
# se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
# yVal+qt(.975, df=n-2)*se2
# sum2 <- sum((y-yVal)^2)
# sum2-sum1
fit <- lm(y~x-1)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- x
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sum2 <- sum((y-yVal)^2)
sum2-sum1
sum2
data(mtcars)
n <- nrow(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y~x)
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y-beta0-beta1*x
sigma <- sqrt(sum(e^2)/(n-2))
ssx <- sum((x-mean(x))^2)
xVal <- x
yVal <- beta0+beta1*xVal
se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
yVal+qt(.975, df=n-2)*se2
sum1 <- sum((y-yVal)^2)
sum1
# fit <- lm(y~x-1)
# beta1 <- cor(y,x)*sd(y)/sd(x)
# beta0 <- mean(y)-beta1*mean(x)
# e <- y-beta0-beta1*x
# sigma <- sqrt(sum(e^2)/(n-2))
# ssx <- sum((x-mean(x))^2)
# xVal <- x
# yVal <- beta0+beta1*xVal
# se1 <- sigma*sqrt(1/n+(xVal-mean(x))^2/ssx)
# se2 <- sigma*sqrt(1+1/n+(xVal-mean(x))^2/ssx)
# yVal+qt(.975, df=n-2)*se2
sum2 <- sum((y-mean(y))^2)
sum2/sum1
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
install_github('slidifyLibraries','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(datasets)
data(mtcars)
head(mtcars)
summary(lm(mpg ~ cyl + wt, data=mtcars))
summary(mtcars$cyl)
table(mtcars$cyl)
summary(lm(mpg ~ I(1*(cyl=="6")) + I(1*(cyl=="8")) + wt, data=mtcars))
summary(lm(mpg ~ I(1*(cyl=="4")) + I(1*(cyl=="6")) + I(1*(cyl=="8")) + wt -1, data=mtcars))
summary(lm(mpg ~ I(1*(cyl=="4")) + I(1*(cyl=="6")) + I(1*(cyl=="8")) + wt -1, data=mtcars))$coefficients
summary(lm(mpg ~ I(1*(cyl=="4")) + I(1*(cyl=="6")) + I(1*(cyl=="8")) -1, data=mtcars))$coefficients
summary(lm(mpg ~ I(1*(cyl=="6")) + I(1*(cyl=="8")) + wt , data=mtcars))$coefficients
summary(lm(mpg ~ I(1*(cyl=="6")) + I(1*(cyl=="8")) , data=mtcars))$coefficients
summary(lm(mpg ~ I(1*(cyl=="6")) + I(1*(cyl=="8")) + wt , data=mtcars))$coefficients
summary(lm(mpg ~ I(1*(cyl=="6")) + I(1*(cyl=="8")) + wt + I(1*(cyl=="6"))*wt + I(1*(cyl=="8"))*wt, data=mtcars))$coefficients
summary(lm(mpg ~ I(1*(cyl=="6")) + I(1*(cyl=="8")) + wt , data=mtcars))
summary(lm(mpg ~ I(1*(cyl=="6")) + I(1*(cyl=="8")) + wt + I(1*(cyl=="6"))*wt + I(1*(cyl=="8"))*wt, data=mtcars))
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
hatvalues(fit)
sqrt(hatvalues(fit))
hatvalues(fit[ ,2])
hatvalues(fit[ ,1])
hatvalues(fit[ 2,])
hatvalues(fit[2,])
hatvalues(fit[1,])
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbetas(fit)
hatvalues(fit)
?mtcars
summary(lm(mpg ~  wt , data=mtcars))
summary(lm(mpg ~  wt + am, data=mtcars))
summary(lm(mpg ~  am , data=mtcars))
plot(mtcars)
plot(mtcars$mpg)
plot(lm(mpg ~ wt, data=mtcars)
plot(lm(mpg ~ wt, data=mtcars))
plot(lm(mpg ~ wt, data=mtcars))
summary(mtcars)
str(mtcars)
data(mtcars)
mtcars[,c(2,8,9,10,11)] <- as.factor(mtcars[,c(2,8,9,10,11)])
mtcars[,2] <- as.factor(mtcars[,2])
mtcars[,2] <- as.factor(mtcars[,2])
mtcars[,8] <- as.factor(mtcars[,8])
mtcars[,9] <- as.factor(mtcars[,9])
mtcars[,10] <- as.factor(mtcars[,10])
mtcars[,11] <- as.factor(mtcars[,11])
str(mtcars)
summary(lm(mpg ~  am , data=mtcars))
summary(lm(mpg ~  . , data=mtcars))
pairs(mtcars)
pairs(mtcars, panel=panel.smooth)
pairs(mtcars, panel=panel.smooth, col=9+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=3+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=2+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=5+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=6+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=22+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=8+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=11+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=13+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=12+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=3+(mtcars$am=="0"))
pairs(mtcars, panel=panel.smooth, col=12+(mtcars$am=="0"))
summary(lm(mpg ~  . , data=mtcars))
library(datasets)
data(mtcars)
library(datasets)
str(mtcars)
summary(lm(mpg ~  . , data=mtcars))
mtcars[,2] <- as.factor(mtcars[,2])
mtcars[,8] <- as.factor(mtcars[,8])
mtcars[,9] <- as.factor(mtcars[,9])
mtcars[,10] <- as.factor(mtcars[,10])
mtcars[,11] <- as.factor(mtcars[,11])
summary(lm(mpg ~  . , data=mtcars))
pairs(mtcars, panel=panel.smooth, col=12+(mtcars$am=="0"))
summary(lm(mpg ~  . , data=mtcars))
class(summary(lm(mpg ~  . , data=mtcars))$coefficients)
summary(lm(mpg ~  . , data=mtcars))$coefficients
str(mtcars)
str(mtcars$carb)
table(mtcars$carb)
summary(lm(mpg ~  I(1*(cyl=="4")) + I(1*(cyl=="6")) + I(1*(cyl=="8")) + disp + hp + drat + qsec + I(1*(vs=="0")) + I(1*(vs=="1")) + I(1*(am=="0")) + I(1*(am=="1")) + I(1*(gear=="3")) + I(1*(gear=="4")) + I(1*(gear=="5")) + I(1*(carb=="1"))  + I(1*(carb=="2")) + I(1*(carb=="3")) + I(1*(carb=="4")) + I(1*(carb=="6")) + I(1*(carb=="8"))-1, data=mtcars))
summary(lm(mpg ~  . , data=mtcars))
summary(lm(mpg ~  cyl+disp+hp+drat+wt+vs+am+gear+carb , data=mtcars))
summary(lm(mpg ~  cyl+disp+hp+wt+vs+am+gear+carb , data=mtcars))
summary(lm(mpg ~  cyl+disp+hp+wt+am+gear+carb , data=mtcars))
summary(lm(mpg ~  cyl+disp+hp+wt+am+gear , data=mtcars))
summary(lm(mpg ~  cyl+hp+wt+am+gear , data=mtcars))
summary(lm(mpg ~  cyl+hp+wt+am , data=mtcars))
summary(lm(mpg ~  cyl+wt+am , data=mtcars))
summary(lm(mpg ~  I(1*(cyl=="4")) + I(1*(cyl=="6")) + I(1*(cyl=="8")) + disp + hp + drat + qsec + I(1*(vs=="0")) + I(1*(vs=="1")) + I(1*(am=="0")) + I(1*(am=="1")) + I(1*(gear=="3")) + I(1*(gear=="4")) + I(1*(gear=="5")) + I(1*(carb=="1"))  + I(1*(carb=="2")) + I(1*(carb=="3")) + I(1*(carb=="4")) + I(1*(carb=="6")) + I(1*(carb=="8"))-1, data=mtcars))
str(mtcars)
summary(lm(mpg ~  I(1*(cyl=="4"))+I(1*(cyl=="6"))+I(1*(cyl=="8")) + disp + hp + drat +wt+ qsec + I(1*(vs=="0"))+I(1*(vs=="1")) + I(1*(am=="0"))+I(1*(am=="1")) + I(1*(gear=="3"))+I(1*(gear=="4"))+I(1*(gear=="5")) + I(1*(carb=="1"))+I(1*(carb=="2"))+I(1*(carb=="3"))+I(1*(carb=="4"))+I(1*(carb=="6"))+I(1*(carb=="8"))-1, data=mtcars))
summary(lm(mpg ~  I(1*(cyl=="4"))+I(1*(cyl=="6"))+I(1*(cyl=="8")) + disp + hp + drat + wt + I(1*(vs=="0"))+I(1*(vs=="1")) + I(1*(am=="0"))+I(1*(am=="1")) + I(1*(gear=="3"))+I(1*(gear=="4"))+I(1*(gear=="5")) + I(1*(carb=="1"))+I(1*(carb=="2"))+I(1*(carb=="3"))+I(1*(carb=="4"))+I(1*(carb=="6"))+I(1*(carb=="8"))-1, data=mtcars))
summary(lm(mpg ~  cyl+wt+am , data=mtcars))
fit <- summary(lm(mpg ~  cyl+wt+am , data=mtcars))
plot(fit)
library(scatterplot3d)
fit <- summary(lm(mpg ~  cyl+wt+am , data=mtcars))
scatterplot3d(fit)
library(scatterplot3d)
fit <- lm(mpg ~  cyl+wt+am , data=mtcars)
scatterplot3d(fit)
plot(fit)
fit <- lm(mpg ~  cyl+wt+am , data=mtcars)
par(mfrow=c(2,2))
plot(fit)
fit <- lm(mpg ~  . , data=mtcars)
par(mfrow=c(2,2))
plot(fit)
fit <- lm(mpg ~  cyl+wt+am , data=mtcars)
par(mfrow=c(2,2))
plot(fit)
fit
fit$resid
plot(fit$resid)
plot(density(fit$resid))
fit <- lm(mpg ~  cyl+wt+am , data=mtcars)
par(mfrow=c(2,2))
plot(fit)
plot(density(fit$resid))
par(mfrow=c(1,1))
plot(density(fit$resid))
fit <- lm(mpg ~  cyl+wt+am , data=mtcars)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
plot(density(fit$resid))
plot(density(mtcars$mpg))
plot(mtcars$mpg, type="l")
plot(mtcars$mpg, type="h")
barplot(mtcars$mpg)
pairs(mtcars, panel=panel.smooth, col=12+(mtcars$am=="0"))
dfbetas(fit)
round(dfbetas(fit), 3)
round(hatvalues(fit), 3)
summary(lm(mpg ~  cyl+wt+am , data=mtcars))
library(datasets)
data(mtcars)
for (i in c(2,8,9,10,11)){mtcars[,i] <- as.factor(mtcars[,i])}
str(mtcars)
summary(lm(mpg ~  . , data=mtcars))
summary(lm(mpg ~  . , data=mtcars))$coefficients
round(summary(lm(mpg ~  . , data=mtcars))$coefficients, 4)
round(summary(lm(mpg ~  . , data=mtcars))$coefficients, 5)
t(round(summary(lm(mpg ~  . , data=mtcars))$coefficients, 5))
t(round(summary(lm(mpg ~  . , data=mtcars))$coefficients, 5)[,4])
A <- round(summary(lm(mpg ~  . , data=mtcars))$coefficients, 5)
rownames(A)
summary(lm(mpg ~  cyl+wt+am , data=mtcars))
str(summary(lm(mpg ~  cyl+wt+am , data=mtcars)))
summary(lm(mpg ~  cyl+wt+am , data=mtcars))
head(mtcars$wt)
fit <- lm(mpg ~  cyl+wt+am , data=mtcars)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))  ##See the Plot 3 in the appendices
plot(density(fit$resid))
round(dfbetas(fit), 3)
t(round(dfbetas(fit), 3))
round(hatvalues(fit), 3)
fit
In short, the MLR model is reasonable and since the R-
lm(formula = mpg ~ cyl + wt + am, data = mtcars)
summary(lm(formula = mpg ~ cyl + wt + am, data = mtcars))
sqrt(0.8134)
round(summary(lm(mpg ~  cyl+disp+hp+wt+am+gear+carb , data=mtcars))$coefficients, 4)
dim(round(hatvalues(fit), 3))
class(round(hatvalues(fit), 3))
nrow(round(hatvalues(fit), 3))
round(hatvalues(fit), 3)
round(hatvalues(fit), 3)[1:10]
length(round(hatvalues(fit), 3))
class(t(round(dfbetas(fit), 3)))
dim(t(round(dfbetas(fit), 3)))
pred <- predict(modFit, te)
pred[3] <- "B"
pred
Xprediction <- predict(modFit, Xvalidation)
Xprediction == Xvalidation$clasee
table(Xprediction, Xvalidation$classe)
pred <- predict(modFit, te)
pred[3] <- "B"
pred
Xprediction <- predict(modFit, Xvalidation)
Xprediction == Xvalidation$classe
table(Xprediction, Xvalidation$classe)
pred <- predict(modFit, te)
pred[3] <- "B"
pred
library(caret)
library(lattice)
library(ggplot2)
library(randomForest)
library(rattle)
setwd("D:\\Learning Materials\\Coursera_Practical Machine Learning\\Project")
tr <- read.csv(".\\pml-training.csv", na.strings=c("NA", ""))
te <- read.csv(".\\pml-testing.csv", na.strings=c("NA", ""))
tr <- tr[,-c(1:7)]
te <- te[,-c(1:7)]
bad <- rep(NA, ncol(tr))
for (i in 1:ncol(tr)){
if (any(is.na(tr[, i]))) {bad[i] <- i}
}
bad <- bad[!is.na(bad)]
training <- tr[,-bad]
bad <- rep(NA, ncol(te))
for (i in 1:ncol(te)){
if (any(is.na(te[, i]))) {bad[i] <- i}
}
bad <- bad[!is.na(bad)]
testing <- te[,-bad]
names(training)==names(testing)
testing <- testing[ ,-ncol(testing)]
M <- abs(cor(training[,-53]))
diag(M) <- 0
A <- which(M > 0.6,arr.ind=T)
sigVars <- unique(c(A[,1], A[,2]))
length(unique(c(A[,1], A[,2])))
training <- cbind(training[,sigVars], tr$classe)
colnames(training)[ncol(training)] <- "classe"
testing <- testing[,sigVars]
set.seed(10011)
inTrain <- createDataPartition(y=training$classe, p=0.2, list=FALSE)
training <- training[inTrain, ]
Xvalidation <- tr[-inTrain, ]
dim(Xvalidation)
dim(training)
modFit <- train(classe ~ ., data=training, method="rf", trControl = trainControl(method = "cv", number = 4))
Xprediction <- predict(modFit, Xvalidation)
Xprediction == Xvalidation$classe
table(Xprediction, Xvalidation$classe)
pred <- predict(modFit, te)
pred[3] <- "B"
pred
tr <- tr[,-c(1:7)]
setwd("D:\\Learning Materials\\Coursera_Practical Machine Learning\\Project")
tr <- read.csv(".\\pml-training.csv", na.strings=c("NA", ""))
te <- read.csv(".\\pml-testing.csv", na.strings=c("NA", ""))  ##all blank and NA observations as read as NA's
tr <- tr[,-c(1:7)]
bad <- rep(NA, ncol(tr))      ## Create a null vector "bad" to record variables with NAs.
for (i in 1:ncol(tr)){
if (any(is.na(tr[, i]))) {bad[i] <- i}    ## As long as a variable contains NA, it is labelled as "bad" variable.
}
bad <- bad[!is.na(bad)]
training <- tr[,-bad]    ## Throw away "tr" columns labelled as "bad" and assign the remaining data to "training"
M <- abs(cor(training[,-53]))        ## M is the correlation matrix of all 52 potential regressors.
diag(M) <- 0    ## Obviously, cor(XX,XX)=1. We ignore such self-correlation values by let the diagonal values be 0.
A <- which(M > 0.6,arr.ind=T)    ## Keep matrix entries above the threshold level, 0.6
sigVars <- unique(c(A[,1], A[,2]))    ## With unique() function, we get the "sigVars" vector consisting of column numbers correspondant to signicant variables.
length(unique(c(A[,1], A[,2])))
training <- cbind(training[,sigVars], tr$classe)
colnames(training)[ncol(training)] <- "classe"
set.seed(10011)    ## Set randomization seed for reproduciblility
inTrain <- createDataPartition(y=training$classe, p=0.2, list=FALSE)    ## The training set accounts for 20% of the "training" dataser.
realTraining <- training[inTrain, ]
Xvalidation <- tr[-inTrain, ]
dim(Xvalidation)
dim(realTraining)
modFit <- train(classe ~ ., data=realTraining, method="rf", trControl = trainControl(method = "cv", number = 4))
modFit
set.seed(10086)
modFit <- train(classe ~ ., data=realTraining, method="rf", trControl = trainControl(method = "cv", number = 4))
modFit
set.seed(10086)
modFit <- train(classe ~ ., data=realTraining, method="rf", trControl = trainControl(method = "cv", number = 4))
modFit
Xprediction <- predict(modFit, Xvalidation)
Xtable <- table(Xprediction, Xvalidation$classe)
Xtable
Xprediction <- predict(modFit, Xvalidation)
Xtable <- table(Xprediction, Xvalidation$classe)
Xtable
pred <- predict(modFit, te)
pred
sum(diag(Xtable))
sum(diag(Xtable))/ncol(Xvalidation)
ncol(Xvalidation)
nrow(Xvalidation)
pred
